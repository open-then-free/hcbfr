#!/usr/bin/env ruby

CONFIG_SHOW_BUNDLER_UPDATE_WARNING = false
CONFIG_SHOW_BUNDLER_CONFIG_WARNING = false
CONFIG_SHOW_BUNDLER_CALLED_WARNING = false

require 'fileutils'

puts File.exist?("xtr-001")
puts File.exist?("app")
system('ls')

if File.exist?("xtr-001")
  FileUtils.cp("xtr-001", "Gemfile")
else
  FileUtils.cp("bhvr/directors/Gemfile.base", "Gemfile")
end

if File.exist?("xtr-002")
  FileUtils.cp("xtr-002", "Gemfile.lock")
else
  FileUtils.cp("bhvr/directors/Gemfile.lock", "Gemfile.lock")
end

if File.exist?("xtr-003")
  FileUtils.cp("xtr-003", "Procfile")
else
  FileUtils.cp("bhvr/directors/Procfile.base", "Procfile")
end

FileUtils.mkdir(".bundle")
FileUtils.cp(".gap/depmgr/config.file", ".bundle/config")

$stdout.sync = true

$:.unshift File.expand_path("../../lib", __FILE__)

require "language_pack"
require "language_pack/shell_helpers"

begin
  LanguagePack::Instrument.trace "compile", "app.compile" do
    if pack = LanguagePack.detect(ARGV[0], ARGV[1])
      LanguagePack::ShellHelpers.initialize_env(ARGV[2])
      pack.topic("Compiling #{pack.name}")
      pack.log("compile") do
        pack.compile
      end
    end
  end
rescue Exception => exception
  Kernel.puts " !"
  exception.message.split("\n").each do |line|
    Kernel.puts " ! #{line.strip}"
  end
  Kernel.puts " !"
  if exception.is_a?(BuildpackError)
    exit 1
  else
    raise exception
  end
end
